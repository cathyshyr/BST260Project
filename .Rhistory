Sys.sleep(5)
fxddata <- read.csv("~/Downloads/FanGraphs Leaderboard.csv")
file.remove("~/Downloads/FanGraphs Leaderboard.csv")
remDr$closeWindow()
# Join the data
data <- full_join(sdata, adata, by=c("Name", "Team", "playerid"))
data <- full_join(data, bbdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, wpdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, ptdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, pddata, by=c("Name", "Team", "playerid"))
data <- full_join(data, vdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, pvdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, fxtdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, fxvedata, by=c("Name", "Team", "playerid"))
data <- full_join(data, fxhmdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, fxvmdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, fxvdata, by=c("Name", "Team", "playerid"))
data <- full_join(data, fxddata, by=c("Name", "Team", "playerid"))
data$Year <- Year
# Removes extra symbols (incomplete)
data$K. <- as.numeric(gsub(" %", "", data$K.))
data$BB. <- as.numeric(gsub(" %", "", data$BB.))
data$LD. <- as.numeric(gsub(" %", "", data$LD.))
data$GB. <- as.numeric(gsub(" %", "", data$GB.))
data$FB..x <- as.numeric(gsub(" %", "", data$FB..x))
data$IFFB. <- as.numeric(gsub(" %", "", data$IFFB.))
data$HR.FB <- as.numeric(gsub(" %", "", data$HR.FB))
data$IFH. <- as.numeric(gsub(" %", "", data$IFH.))
data$BUH. <- as.numeric(gsub(" %", "", data$BUH.))
data$Pull. <- as.numeric(gsub(" %", "", data$Pull.))
data$Cent. <- as.numeric(gsub(" %", "", data$Cent.))
data$Oppo. <- as.numeric(gsub(" %", "", data$Oppo.))
data$Soft. <- as.numeric(gsub(" %", "", data$Soft.))
data$Med. <- as.numeric(gsub(" %", "", data$Med.))
data$Hard. <- as.numeric(gsub(" %", "", data$Hard.))
data$LD. <- as.numeric(gsub(" %", "", data$LD.))
data$FB..y <- as.numeric(gsub(" %", "", data$FB..y))
data$SL..x <- as.numeric(gsub(" %", "", data$SL..x))
data$CT. <- as.numeric(gsub(" %", "", data$CT.))
data$CB. <- as.numeric(gsub(" %", "", data$CB.))
data$CH..x <- as.numeric(gsub(" %", "", data$CH..x))
data$SF. <- as.numeric(gsub(" %", "", data$SF.))
data$KN..x <- as.numeric(gsub(" %", "", data$KN..x))
data$XX. <- as.numeric(gsub(" %", "", data$XX.))
data$O.Swing..x <- as.numeric(gsub(" %", "", data$O.Swing..x))
data$Z.Swing..x <- as.numeric(gsub(" %", "", data$Z.Swing..x))
data$Swing..x <- as.numeric(gsub(" %", "", data$Swing..x))
data$O.Contact..x <- as.numeric(gsub(" %", "", data$O.Contact..x))
data$Z.Contact..x <- as.numeric(gsub(" %", "", data$Z.Contact..x))
data$Contact..x <- as.numeric(gsub(" %", "", data$Contact..x))
data$Zone..x <- as.numeric(gsub(" %", "", data$Zone..x))
data$F.Strike. <- as.numeric(gsub(" %", "", data$F.Strike.))
data$SwStr. <- as.numeric(gsub(" %", "", data$SwStr.))
(incomplete)
if(borp=="pit"){
data$LOB. <- as.numeric(gsub(" %", "", data$LOB.))
data$K.BB. <- as.numeric(gsub(" %", "", data$K.BB.))
}
data
}
fetch_FGmaj(Year = 2017, borp = "bat")
require(RSelenium)
require(dplyr)
# Create the URL's
standardurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=0&season=", Year, "&team=0&players=")
advancedurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=1&season=", Year, "&team=0&players=")
battedballurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=2&season=", Year, "&team=0&players=")
winprobabilityurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=3&season=", Year, "&team=0&players=")
pitchtypeurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=4&season=", Year, "&team=0&players=")
Year = 2017
borp = "bat"
Pos = "all"
require(RSelenium)
require(dplyr)
# Create the URL's
standardurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=0&season=", Year, "&team=0&players=")
advancedurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=1&season=", Year, "&team=0&players=")
qual = 0
# Create the URL's
standardurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=0&season=", Year, "&team=0&players=")
advancedurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=1&season=", Year, "&team=0&players=")
battedballurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=2&season=", Year, "&team=0&players=")
winprobabilityurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=3&season=", Year, "&team=0&players=")
pitchtypeurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=4&season=", Year, "&team=0&players=")
platedisciplineurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=5&season=", Year, "&team=0&players=")
valueurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=6&season=", Year, "&team=0&players=")
pitchvalueurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=7&season=", Year, "&team=0&players=")
fxtypeurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=9&season=", Year, "&team=0&players=")
fxvelocityurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=10&season=", Year, "&team=0&players=")
fxhmovementurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=11&season=", Year, "&team=0&players=")
fxvmovementurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=12&season=", Year, "&team=0&players=")
fxvalueurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=13&season=", Year, "&team=0&players=")
fxvaluep100url <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=14&season=", Year, "&team=0&players=")
fxdisciplineurl <- paste0("http://www.fangraphs.com/leaders.aspx?pos=", Pos, "&stats=", borp, "&lg=all", "&qual=", qual, "&type=15&season=", Year, "&team=0&players=")
# Scrape the data
RSelenium::rsDriver()
fprof <- getFirefoxProfile("/Users/benjaminhong/Library/Application Support/Firefox/Profiles/xdcnxjtl.Default User", useBase = TRUE)
remDr <- remoteDriver(extraCapabilities = fprof)
remDr$open()
remDr
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4445L
, browserName = "firefox"
)
remDr
remDr
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4445
, browserName = "firefox"
)
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4445L
, browserName = "firefox"
)
remDr <- remoteDriver(extraCapabilities = fprof)
fprof <- getFirefoxProfile("/Users/benjaminhong/Library/Application Support/Firefox/Profiles/xdcnxjtl.Default User", useBase = TRUE)
remDr <- remoteDriver(extraCapabilities = fprof)
remDr$open()
library(rvest)
library(rvest)
url <- "https://www.baseball-reference.com/teams/NYY/2017.shtml"
h <- read_html(url)
h
tab <- h %>% html_node("table")
tab
tab <- h %>% html_node("#div_team_batting")
tab
tab <- h %>% html_node("div")
tab
h %>% html_node("#div_team_batting") %>% html_text()
h <- read_html("http://www.foodnetwork.com/recipes/alton-brown/guacamole-recipe-1940609")
recipe <- h %>% html_node(".o-AssetTitle__a-HeadlineText") %>% html_text()
recipe
h %>% html_nodes("div") %>% html_text()
h %>% html_nodes("<div class="overthrow table_container" id="div_team_batting">") %>% html_text()
tab <- h %>% html_node("#div_team_batting")
tab
shiny::runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
?readLines
?getUrlHash
require(RCurl)
?getURL
library(XML)
library(RCurl)
library(rlist)
require(Lahman)
teams <- unique(Teams$franchID)
years <- 1871:2017
urls <- matrix(0, length(teams), length(years))
for(i in 1:length(teams)) {
for(j in 1:length(years)) {
urls[i, j] <- paste0("https://www.baseball-reference.com/teams/", teams[i], "/", years[j], ".shtml")
}
}
url_vector <- as.vector(urls)
i=1
url <- url_vector[i]
res <- try(getURL(url), silent = TRUE)
res
library(shiny)
runApp('Documents/Harvard Fall 2017/myfirstapp')
?sliderInput
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
?plotOutput
runApp('Documents/Harvard Fall 2017/myfirstapp')
?renderPlot
runApp('Documents/Harvard Fall 2017/myfirstapp')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sliderInput(inputId = "n", label = "Choose number of samples", value = 1, min = 1, max = 1000),
plotOutput(outputId = "hist")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$his <- renderPlot({
hist(rnorm(input$n))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
runApp('Documents/Harvard Fall 2017/myfirstapp')
library(dslabs)
data("polls_us_election_2016")
polls_us_election_2016$startdate %>% head
require(tidyverse)
polls_us_election_2016$startdate %>% head
class(polls_us_election_2016$startdate)
as.numeric(polls_us_election_2016$startdate) %>% head
polls_us_election_2016 %>% filter(pollster == "Ipsos" & state =="U.S.") %>%
ggplot(aes(startdate, rawpoll_trump)) +
geom_line()
set.seed(2)
dates <- sample(polls_us_election_2016$startdate, 10) %>% sort
dates
data.frame(date = days,
month = month(dates),
day = day(dates),
year = year(dates))
data.frame(month = month(dates),
day = day(dates),
year = year(dates))
library(lubridate)
data.frame(month = month(dates),
day = day(dates),
year = year(dates))
month(dates, label = TRUE)
x <- c(20090101, "2009-01-02", "2009 01 03", "2009-1-4",
"2009-1, 5", "Created on 2009 1 6", "200901 !!! 07")
ymd(x)
now()
now()
now("GMT")
now() %>% hour()
now() %>% minute()
now() %>% second()
x <- c("12:34:56")
hms(x)
data(murders)
head(murders)
data(polls_us_election_2016)
head(results_us_election_2016)
tab <- left_join(murders, results_us_election_2016, by = "state")
tab %>% select(state, population, electoral_votes) %>% head()
tab %>% ggplot(aes(population/10^6, electoral_votes, label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
library(ggrepel)
tab %>% ggplot(aes(population/10^6, electoral_votes, label = abb)) +
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
tab1 <- slice(murders, 1:6) %>% select(state, population)
tab1
tab2 <- slice(results_us_election_2016, c(1:3, 5, 7:8)) %>% select(state, electoral_votes)
tab2
left_join(tab1, tab2)
inner_join(tab1, tab2)
full_join(tab1, tab2)
semi_join(tab1, tab2)
anti_join(tab1, tab2)
tab1 <- tab[, 1:3]
tab2 <- tab[, 4:6]
tab3 <- tab[, 7:9]
tab1
new_tab <- bind_cols(tab1, tab2, tab3)
head(new_tab)
tab2
tab3
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
union(tab1, tab2)
intersect(1:10, 6:15)
intersect(c("a","b","c"), c("b","c","d"))
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
tab1
tab2
intersect(tab1, tab2)
intersect(tab1, tab2)
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
intersect(tab1, tab2)
require(dplyr)
intersect(tab1, tab2)
union(1:10, 6:15)
union(c("a","b","c"), c("b","c","d"))
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
tab1
union(tab1, tab2)
setdiff(1:10, 6:15)
setdiff(6:15, 1:10)
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
setdiff(tab1, tab2)
tab1
tab2
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
setwd("~/Documents/GitHub/BST260Project")
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
BBProspectus <- BBProspectus %>%
select(c(-X, -W))
library(XML)
library(RCurl)
library(rlist)
library(readr)
library(tidyverse)
library(dplyr)
library(broom)
library(Lahman)
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
BBProspectus <- BBProspectus %>%
select(c(-X, -W))
#Read in BBProspectus data and remove extraneous columns
BBReference <- read.csv("BBReference.csv")
BBReference <- BBReference %>%
rename(rWAR = WAR) %>%
select(c(-X, -source, -W))
#Inner join BB Ref and BB Pros for a complete data set
data <- inner_join(BBReference, BBProspectus, by = c("franchID", "yearID"))
#Join combined data with true number of wins in Lahman's dataset to create wide data set
team_sub <- Teams %>%
select(yearID, franchID, W)  %>%
rename(Truth = W)
data_wide <- left_join(data, team_sub, by = c("franchID", "yearID"))
#Gather into long data format
data_long <- gather(data_wide, source, WAR, -c(franchID, yearID))
data_sum <- data_long %>%
group_by(yearID, source) %>%
summarize(sumWAR = sum(WAR))
data_sum %>%
ggplot(aes(x = yearID, y = sumWAR, group = source)) +
geom_line(aes(color = source)) +
ggtitle("Number of Wins vs. Wins by Replacement (WAR) by Year") +
xlab("Year") +
ylab("Number of Wins")
data_sum
data_sum %>%
ggplot(aes(x = yearID, y = sumWAR, group = source)) +
geom_line(aes(color = source)) +
ggtitle("Number of Wins vs. Wins by Replacement (WAR) by Year") +
xlab("Year") +
ylab("Number of Wins")
View(data_sum)
data_long
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
BBProspectus <- BBProspectus %>%
select(c(-X, -W))
#Read in BBProspectus data and remove extraneous columns
BBReference <- read.csv("BBReference.csv")
BBReference <- BBReference %>%
rename(rWAR = WAR) %>%
select(c(-X, -source, -W))
#Inner join BB Ref and BB Pros for a complete data set
data <- inner_join(BBReference, BBProspectus, by = c("franchID", "yearID"))
#Join combined data with true number of wins in Lahman's dataset to create wide data set
team_sub <- Teams %>%
select(yearID, franchID, W)  %>%
rename(Truth = W)
data_wide <- left_join(data, team_sub, by = c("franchID", "yearID"))
data_wide
library(Lahman)
playerInfo
?Lahman
master <- read_csv("https://raw.githubusercontent.com/datasciencelabs/data/master/Master.csv")
View(master)
player_info <- master %>% select(playerID, nameFirst, nameLast, birthYear, height)
salaries <- read_csv("https://raw.githubusercontent.com/datasciencelabs/data/master/Salaries.csv")
View(salaries)
View(salaries)
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
BBProspectus <- BBProspectus %>%
select(c(-X, -W))
#Read in BBProspectus data and remove extraneous columns
BBReference <- read.csv("BBReference.csv")
BBReference <- BBReference %>%
rename(rWAR = WAR) %>%
select(c(-X, -source, -W))
#Inner join BB Ref and BB Pros for a complete data set
data <- inner_join(BBReference, BBProspectus, by = c("franchID", "yearID"))
#Join combined data with true number of wins in Lahman's dataset to create wide data set
team_sub <- Teams %>%
select(yearID, franchID, W)  %>%
rename(Truth = W)
data_wide <- left_join(data, team_sub, by = c("franchID", "yearID"))
head(data_wide)
View(data_wide)
library(Lahman)
teams <- unique(Teams$franchID)
teams
teams=="MIA"
teams=="CAL"
library(XML)
library(RCurl)
library(rlist)
library(Lahman)
library(tidyverse)
library(openxlsx)
## obtain CAL
teams <- "CAL"
years <- 1961:1996
urls <- matrix(0, length(teams), length(years))
for(j in 1:length(years)) {
urls[i, j] <- paste0("https://www.baseball-reference.com/teams/", teams, "/", years[j], ".shtml")
}
teams <- "CAL"
years <- 1961:1996
urls <- matrix(0, length(teams), length(years))
for(j in 1:length(years)) {
urls[j] <- paste0("https://www.baseball-reference.com/teams/", teams, "/", years[j], ".shtml")
}
urls
urls <- rep(0, length(years))
for(j in 1:length(years)) {
urls[j] <- paste0("https://www.baseball-reference.com/teams/", teams, "/", years[j], ".shtml")
}
urls
length(urls)
teams <- "CAL"
years <- 1961:1996
list_of_batting_CAL <- list()
list_of_pitching_CAL <- list()
urls <- rep(0, length(years))
for(j in 1:length(years)) {
urls[j] <- paste0("https://www.baseball-reference.com/teams/", teams, "/", years[j], ".shtml")
}
for(i in 1:length(urls)) {
url <- urls[i]
res <- try(readLines(url), silent = TRUE)
## check if website exists
if(inherits(res, "try-error")) {
list_of_batting_CAL[[i]] <- NA
list_of_pitching_CAL[[i]] <- NA
}
else {
urltxt <- readLines(url)
urltxt <- gsub("-->", "", gsub("<!--", "", urltxt))
doc <- htmlParse(urltxt)
tables_full <- readHTMLTable(doc)
tmp1 <- tables_full$players_value_batting
tmp2 <- tables_full$players_value_pitching
list_of_batting_CAL[[i]] <- tmp1
list_of_pitching_CAL[[i]] <- tmp2
}
print(i)
closeAllConnections()
}
na.omit.list <- function(y) {
return(y[!sapply(y, function(x) all(is.na(x)))])
}
list_of_batting_CAL
## find indices where the link exists
ind_batting <- which(!is.na(list_of_batting_CAL))
ind_pitching <- which(!is.na(list_of_batting_CAL))
ind_batting
## find indices where the link exists
ind_batting <- which(!is.na(list_of_batting_CAL))
ind_pitching <- which(!is.na(list_of_batting_CAL))
## find links that exist
url_batting <- url_vector[ind_batting]
url_pitching <- url_vector[ind_pitching]
## find links that exist
url_batting <- urls[ind_batting]
url_pitching <- urls[ind_pitching]
## extract year from each url
years_batting <- as.numeric(unlist(regmatches(url_batting, gregexpr("[[:digit:]]+", url_batting))))
years_pitching <- as.numeric(unlist(regmatches(url_pitching, gregexpr("[[:digit:]]+", url_pitching))))
years_batting
## extract team from each url
teams_batting <- basename(dirname(url_batting))
teams_pitching <- basename(dirname(url_pitching))
teams_batting
test_batting <- na.omit.list(list_of_batting_CAL)
test_pitching <- na.omit.list(list_of_pitching_CAL)
## add columns for year and team
test_batting <- mapply(cbind, test_batting, "Year" = years_batting,
"Team" = "CAL", SIMPLIFY = F)
test_batting
## extract team from each url
teams_batting <- basename(dirname(url_batting))
teams_pitching <- basename(dirname(url_pitching))
## add columns for year and team
test_batting <- mapply(cbind, test_batting, "Year" = years_batting,
"Team" = teams_batting, SIMPLIFY = F)
## add columns for year and team
test_batting <- mapply(cbind, test_batting, "Year" = years_batting,
"Team" = teams_batting)
test_pitching <- mapply(cbind, test_pitching, "Year" = years_pitching,
"Team" = teams_pitching)
test_batting
test_batting <- na.omit.list(list_of_batting_CAL)
test_pitching <- na.omit.list(list_of_pitching_CAL)
test_batting
test_batting <- mapply(cbind, test_batting, "Year" = years_batting,
"Team" = teams_batting, SIMPLIFY = F)
class(test_batting)
?mapply
## add columns for year and team
test_batting <- mapply(cbind, as.list(test_batting), "Year" = years_batting,
"Team" = teams_batting, SIMPLIFY = F)
## add columns for year and team
test_batting <- mapply(cbind, test_batting, "Year" = years_batting,
"Team" = teams_batting, SIMPLIFY = F)
