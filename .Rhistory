library(rlist)
library(readr)
library(tidyverse)
library(dplyr)
library(broom)
library(Lahman)
library(caret)
MSE <- function(Truth_ratings, predicted_ratings){
sqrt(mean((Truth_ratings - predicted_ratings)^2, na.rm = TRUE))
}
# Chunk 5
var url ='https://www.fangraphs.com/leaders.aspx?pos=all&stats=pit&lg=all&qual=0&type=8&season=2017&month=0&season1=2017&ind=0&team=30&rost=0&age=0';
var page = new WebPage()
var fs = require('fs');
page.open(url, function (status) {
just_wait();
});
function just_wait() {
setTimeout(function() {
fs.write('1.html', page.content, 'w');
phantom.exit();
}, 2500);
}
# Chunk 7
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
BBProspectus <- BBProspectus %>%
rename(BBproWAR = WARP, teamID = franchID) %>%
select(c(-X, -W))
#Baseball Prospectus had some funny names, so first we need to align them with our other datasets using Lahman
BBProspectus$franchID = NA
BBProspectus = BBProspectus %>%
filter(yearID >= 1949)
for (i in 1:length(BBProspectus[, 1]))
{
BBProspectus[i, ]$franchID =
as.character(unique(
Teams$franchID[as.character(Teams$teamID) == as.character(BBProspectus[i, ]$teamID)])[1])
}
BBProspectus = BBProspectus %>%
select(c(-teamID))
#Read in BBProspectus data and remove extraneous columns
BBReference <- read.csv("BBReference.csv")
BBReference <- BBReference %>%
filter(yearID >= 1949) %>%
rename(BRefWAR = WAR) %>%
select(c(-X, -source, -W))
BBReference = BBReference[!is.na(BBReference$BRefWAR), ]
#Baseball Reference Team IDs are based on the team of that year, need to correct this for a few teams
alts = c("LAA", "CAL", "TBR", "MIA", "PHA")
delt = c("ANA", "ANA", "TBD", "FLA", "OAK")
for (i in 1:length(BBReference[, 1]))
{
if ((BBReference[i, ]$franchID %in% alts))
{
BBReference[i, ]$franchID =  delt[match(BBReference[i, ]$franchID, alts)]
}
}
FanGraphs <- read.csv("Conor/FanGraphWARs_better_format.csv")
FanGraphs <- FanGraphs %>%
rename(FanGraphWAR = WAR, yearID=year) %>%
select(c(-X))
#Inner join the three for a complete data set
data <- inner_join(BBReference, BBProspectus, by = c("franchID", "yearID"))
data = inner_join(data, FanGraphs, by =c("franchID", "yearID"))
#Join combined data with true number of wins in Lahman's dataset to create wide data set
team_sub <- Teams %>%
select(yearID, franchID, W, G, lgID)  %>%
rename(Truth = W, Games = G)
data_wide <- left_join(data, team_sub, by = c("franchID", "yearID"))
data_wide = data_wide %>%
filter(yearID %in% 1949:2016) %>%
mutate(BRefWAR = BRefWAR + Games * 0.294, FanGraphWAR = FanGraphWAR + Games * 0.294, BBproWAR = BBproWAR + Games*0.320) %>%
rename(BRefPred = BRefWAR, FanGraphPred = FanGraphWAR, BBproPred = BBproWAR)
data_long <- gather(data_wide, source, WAR, -c(franchID, yearID))
# Chunk 8
MSE(data_wide$Truth, data_wide$FanGraphPred)
MSE(data_wide$Truth, data_wide$BBproPred)
MSE(data_wide$Truth, data_wide$BRefPred)
statistics_matrix = matrix(nrow = 3, ncol = 3)
rownames(statistics_matrix) = c("Fan Graph", "Baseball Prospectus", "Baseball Reference")
colnames(statistics_matrix) = c("Mean Difference", "Standard Deviation", "Slope")
FG_diff = data_wide$FanGraphPred - data_wide$Truth
statistics_matrix[1,1] = mean(FG_diff)
statistics_matrix[1,2] = sd(FG_diff)
statistics_matrix[1,3] = lm(Truth ~ FanGraphPred, data = data_wide)$coef[[2]]
BBP_diff = data_wide$BBproPred - data_wide$Truth
statistics_matrix[2,1] = mean(BBP_diff)
statistics_matrix[2,2] = sd(BBP_diff)
statistics_matrix[2,3] = lm(Truth ~ BBproPred, data = data_wide)$coef[[2]]
BRef_diff = data_wide$BRefPred - data_wide$Truth
statistics_matrix[3,1] = mean(BRef_diff)
statistics_matrix[3,2] = sd(BRef_diff)
statistics_matrix[3,3] = lm(Truth ~ BRefPred, data = data_wide)$coef[[2]]
show(statistics_matrix)
diff2 = cbind(FG_diff, BBP_diff, BRef_diff)
diff2 = as.data.frame(diff2)
diff2 %>% ggplot() +
geom_histogram(aes(x=FG_diff, fill="Fan Graph"), alpha = 0.2, breaks = seq(-20, 20, 0.5)) +
geom_histogram(aes(x=BBP_diff, fill="Baseball Prospectus"), alpha = 0.2, breaks = seq(-20, 20, 0.5)) +
geom_histogram(aes(x=BRef_diff, fill="Baseball Reference"), alpha = 0.2, breaks = seq(-20, 20, 0.5)) +
ggtitle("Difference Between Predicted and True Wins") +
xlab("Difference") +
ylab("Count") +
scale_fill_manual(values = c("Fan Graph" = rgb(1,0,0), "Baseball Prospectus" = rgb(0,1,0), "Baseball Reference"=rgb(0,0,1)))
data_wide %>% ggplot(aes(x = Truth, y = FanGraphPred)) +
geom_point(color="red", size = 1) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Fan Graph True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
data_wide %>% ggplot(aes(x = Truth, y = BBproPred)) +
geom_point(color="green", size = 1) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Baseball Prospectus True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
data_wide %>% ggplot(aes(x = Truth, y = BRefPred)) +
geom_point(color="blue", size = 1) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Baseball Reference True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
data_wide %>% ggplot() +
geom_point(aes(x = Truth, y = FanGraphPred, color="Fan Graph"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BBproPred, color="Baseball Prospectus"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BRefPred, color="Baseball Reference"), alpha = 0.5) +
scale_fill_manual(values = c("Fan Graph" = rgb(1,0,0), "Baseball Prospectus" = rgb(0,1,0), "Baseball Reference"=rgb(0,0,1))) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
league_splits = data_wide %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
##Is there a difference by Era?
#A few Eras to consider: Deadball 2: 1960-1969
#                       DH 1973 - Present
#                       Free Agency 1975-Present
#                       Steroid Ero 1985-2005
#                       Wild Card: 1994 - Present
deadball2 = data_wide %>%
filter(yearID %in% 1960:1969) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
deadball2 = cbind(deadball2, Era="Deadball")
dh = data_wide %>%
filter(yearID %in% 1973:2016) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
dh = cbind(dh, Era="DH")
free_agency = data_wide %>%
filter(yearID %in% 1975:2016) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
free_agency = cbind(free_agency, Era = "Free Agency")
steroid = data_wide %>%
filter(yearID %in% 1985:2005) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
steroid = cbind(steroid, Era="Steroid")
wildcard = data_wide %>%
filter(yearID %in% 1994:2016) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
wildcard = cbind(wildcard, Era="Wildcard")
era_analysis = rbind(deadball2, dh, free_agency, steroid, wildcard)
# Chunk 9: Exploratory Boxplots
data_long <- gather(data_wide, Pred, Val, -c(franchID, yearID, Truth, Games, lgID))
data_long2 <- data_long %>%
mutate(Residuals = (as.numeric(as.character(Val)) - as.numeric(as.character(Truth))))
gg2 <- data_long2 %>%
ggplot(aes(x = franchID, y = Residuals)) +
geom_boxplot(fill = "lightblue") +
facet_wrap(~ Pred, ncol = 1) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Team Name") +
ggtitle("")
gg2
# Chunk 10
set.seed(123)
k <- 10
#Perform k-fold cross validation
folds <- createFolds(1:nrow(data_wide), k)
#Define function for performing gradient-free optimization
fn <- function(x){
ref <- x[1]
pros <- x[2]
fan <- x[3]
pred <- ref*data_wide$BRefPred + pros*data_wide$BBproPred + fan*data_wide$FanGraphPred
MSE(pred, data_wide$Truth)
}
#Initialize output matrix
MSE_val <- matrix(NA, 4, k)
coeffs <- matrix(NA, 3, k)
for(i in 1:k){
test_df <- data_wide[folds[[i]],]
train_df <- data_wide[-folds[[i]],]
m1 <- lm(Truth ~ BRefPred, data = train_df)
m2 <- lm(Truth ~ BBproPred, data = train_df)
m3 <- lm(Truth ~ FanGraphPred, data = train_df)
m4 <- optim(c(1, 1, 1), fn, method = c("Nelder-Mead"))
## test prediction on test dataset
pred1 <- predict(m1, newdata = test_df)
pred2 <- predict(m2, newdata = test_df)
pred3 <- predict(m3, newdata = test_df)
test_df_lm <- cbind(test_df,
BRef_lmpred = pred1,
BBpro_lmpred = pred2,
FanGraph_lmpred = pred3)
MSE_val[1, i] <- MSE(test_df_lm$Truth, test_df_lm$BRef_lmpred)
MSE_val[2, i] <- MSE(test_df_lm$Truth, test_df_lm$BBpro_lmpred)
MSE_val[3, i] <- MSE(test_df_lm$Truth, test_df_lm$FanGraph_lmpred)
MSE_val[4, i] <- m4$value
for(j in 1:3){
coeffs[j, i] <- m4$par[j]
}
}
rownames(MSE_val) <- c("Baseball Reference", "Baseball Prospectus", "Fangraph", "Combined Model")
apply(MSE_val, 1, mean)
# Chunk 11
#Obtain coefficients from combined model
final_coef <- apply(coeffs, 1, mean)
#Make predictions based on combined model
data_wide <- data_wide %>%
mutate(CombinedPred = final_coef[1]*data_wide$BRefPred + final_coef[2]*data_wide$BBproPred + final_coef[3]*data_wide$FanGraphPred )
data_wide %>% ggplot() +
geom_point(aes(x = Truth, y = FanGraphPred, color="Fan Graph"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BBproPred, color="Baseball Prospectus"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BRefPred, color="Baseball Reference"), alpha = 0.5) +
geom_point(aes(x = Truth, y = CombinedPred, color = "Final Model"), alpha = 0.5) +
scale_fill_manual(values = c("Fan Graph" = rgb(1, 0, 0), "Baseball Prospectus" = rgb(0, 1, 0), "Baseball Reference"=rgb(0, 0, 1), "Final Model" = rgb(0, 0, 0))) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
#Make predictions based on combined model
data_wide <- data_wide %>%
mutate(CombinedPred = final_coef[1]*data_wide$BRefPred + final_coef[2]*data_wide$BBproPred + final_coef[3]*data_wide$FanGraphPred )
data_wide
setwd("~/Documents/GitHub/BST260Project")
# Chunk 1: Load packages
library(XML)
library(RCurl)
library(rlist)
library(readr)
library(tidyverse)
library(dplyr)
library(broom)
library(Lahman)
library(caret)
MSE <- function(Truth_ratings, predicted_ratings){
sqrt(mean((Truth_ratings - predicted_ratings)^2, na.rm = TRUE))
}
# Chunk 5
var url ='https://www.fangraphs.com/leaders.aspx?pos=all&stats=pit&lg=all&qual=0&type=8&season=2017&month=0&season1=2017&ind=0&team=30&rost=0&age=0';
var page = new WebPage()
var fs = require('fs');
page.open(url, function (status) {
just_wait();
});
function just_wait() {
setTimeout(function() {
fs.write('1.html', page.content, 'w');
phantom.exit();
}, 2500);
}
# Chunk 7
#Read in BBProspectus data and remove extraneous columns
BBProspectus <- read.csv("prospectus.csv")
BBProspectus <- BBProspectus %>%
rename(BBproWAR = WARP, teamID = franchID) %>%
select(c(-X, -W))
#Baseball Prospectus had some funny names, so first we need to align them with our other datasets using Lahman
BBProspectus$franchID = NA
BBProspectus = BBProspectus %>%
filter(yearID >= 1949)
for (i in 1:length(BBProspectus[, 1]))
{
BBProspectus[i, ]$franchID =
as.character(unique(
Teams$franchID[as.character(Teams$teamID) == as.character(BBProspectus[i, ]$teamID)])[1])
}
BBProspectus = BBProspectus %>%
select(c(-teamID))
#Read in BBProspectus data and remove extraneous columns
BBReference <- read.csv("BBReference.csv")
BBReference <- BBReference %>%
filter(yearID >= 1949) %>%
rename(BRefWAR = WAR) %>%
select(c(-X, -source, -W))
BBReference = BBReference[!is.na(BBReference$BRefWAR), ]
#Baseball Reference Team IDs are based on the team of that year, need to correct this for a few teams
alts = c("LAA", "CAL", "TBR", "MIA", "PHA")
delt = c("ANA", "ANA", "TBD", "FLA", "OAK")
for (i in 1:length(BBReference[, 1]))
{
if ((BBReference[i, ]$franchID %in% alts))
{
BBReference[i, ]$franchID =  delt[match(BBReference[i, ]$franchID, alts)]
}
}
FanGraphs <- read.csv("Conor/FanGraphWARs_better_format.csv")
FanGraphs <- FanGraphs %>%
rename(FanGraphWAR = WAR, yearID=year) %>%
select(c(-X))
#Inner join the three for a complete data set
data <- inner_join(BBReference, BBProspectus, by = c("franchID", "yearID"))
data = inner_join(data, FanGraphs, by =c("franchID", "yearID"))
#Join combined data with true number of wins in Lahman's dataset to create wide data set
team_sub <- Teams %>%
select(yearID, franchID, W, G, lgID)  %>%
rename(Truth = W, Games = G)
data_wide <- left_join(data, team_sub, by = c("franchID", "yearID"))
data_wide = data_wide %>%
filter(yearID %in% 1949:2016) %>%
mutate(BRefWAR = BRefWAR + Games * 0.294, FanGraphWAR = FanGraphWAR + Games * 0.294, BBproWAR = BBproWAR + Games*0.320) %>%
rename(BRefPred = BRefWAR, FanGraphPred = FanGraphWAR, BBproPred = BBproWAR)
data_long <- gather(data_wide, source, WAR, -c(franchID, yearID))
# Chunk 8
MSE(data_wide$Truth, data_wide$FanGraphPred)
MSE(data_wide$Truth, data_wide$BBproPred)
MSE(data_wide$Truth, data_wide$BRefPred)
statistics_matrix = matrix(nrow = 3, ncol = 3)
rownames(statistics_matrix) = c("Fan Graph", "Baseball Prospectus", "Baseball Reference")
colnames(statistics_matrix) = c("Mean Difference", "Standard Deviation", "Slope")
FG_diff = data_wide$FanGraphPred - data_wide$Truth
statistics_matrix[1,1] = mean(FG_diff)
statistics_matrix[1,2] = sd(FG_diff)
statistics_matrix[1,3] = lm(Truth ~ FanGraphPred, data = data_wide)$coef[[2]]
BBP_diff = data_wide$BBproPred - data_wide$Truth
statistics_matrix[2,1] = mean(BBP_diff)
statistics_matrix[2,2] = sd(BBP_diff)
statistics_matrix[2,3] = lm(Truth ~ BBproPred, data = data_wide)$coef[[2]]
BRef_diff = data_wide$BRefPred - data_wide$Truth
statistics_matrix[3,1] = mean(BRef_diff)
statistics_matrix[3,2] = sd(BRef_diff)
statistics_matrix[3,3] = lm(Truth ~ BRefPred, data = data_wide)$coef[[2]]
show(statistics_matrix)
diff2 = cbind(FG_diff, BBP_diff, BRef_diff)
diff2 = as.data.frame(diff2)
diff2 %>% ggplot() +
geom_histogram(aes(x=FG_diff, fill="Fan Graph"), alpha = 0.2, breaks = seq(-20, 20, 0.5)) +
geom_histogram(aes(x=BBP_diff, fill="Baseball Prospectus"), alpha = 0.2, breaks = seq(-20, 20, 0.5)) +
geom_histogram(aes(x=BRef_diff, fill="Baseball Reference"), alpha = 0.2, breaks = seq(-20, 20, 0.5)) +
ggtitle("Difference Between Predicted and True Wins") +
xlab("Difference") +
ylab("Count") +
scale_fill_manual(values = c("Fan Graph" = rgb(1,0,0), "Baseball Prospectus" = rgb(0,1,0), "Baseball Reference"=rgb(0,0,1)))
data_wide %>% ggplot(aes(x = Truth, y = FanGraphPred)) +
geom_point(color="red", size = 1) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Fan Graph True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
data_wide %>% ggplot(aes(x = Truth, y = BBproPred)) +
geom_point(color="green", size = 1) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Baseball Prospectus True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
data_wide %>% ggplot(aes(x = Truth, y = BRefPred)) +
geom_point(color="blue", size = 1) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("Baseball Reference True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
data_wide %>% ggplot() +
geom_point(aes(x = Truth, y = FanGraphPred, color="Fan Graph"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BBproPred, color="Baseball Prospectus"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BRefPred, color="Baseball Reference"), alpha = 0.5) +
scale_fill_manual(values = c("Fan Graph" = rgb(1,0,0), "Baseball Prospectus" = rgb(0,1,0), "Baseball Reference"=rgb(0,0,1))) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
league_splits = data_wide %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
##Is there a difference by Era?
#A few Eras to consider: Deadball 2: 1960-1969
#                       DH 1973 - Present
#                       Free Agency 1975-Present
#                       Steroid Ero 1985-2005
#                       Wild Card: 1994 - Present
deadball2 = data_wide %>%
filter(yearID %in% 1960:1969) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
deadball2 = cbind(deadball2, Era="Deadball")
dh = data_wide %>%
filter(yearID %in% 1973:2016) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
dh = cbind(dh, Era="DH")
free_agency = data_wide %>%
filter(yearID %in% 1975:2016) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
free_agency = cbind(free_agency, Era = "Free Agency")
steroid = data_wide %>%
filter(yearID %in% 1985:2005) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
steroid = cbind(steroid, Era="Steroid")
wildcard = data_wide %>%
filter(yearID %in% 1994:2016) %>%
group_by(lgID) %>%
summarize(MSE(Truth, FanGraphPred), MSE(Truth, BBproPred),
MSE(Truth, BRefPred) )
wildcard = cbind(wildcard, Era="Wildcard")
era_analysis = rbind(deadball2, dh, free_agency, steroid, wildcard)
# Chunk 9: Exploratory Boxplots
data_long <- gather(data_wide, Pred, Val, -c(franchID, yearID, Truth, Games, lgID))
data_long2 <- data_long %>%
mutate(Residuals = (as.numeric(as.character(Val)) - as.numeric(as.character(Truth))))
gg2 <- data_long2 %>%
ggplot(aes(x = franchID, y = Residuals)) +
geom_boxplot(fill = "lightblue") +
facet_wrap(~ Pred, ncol = 1) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Team Name") +
ggtitle("")
gg2
# Chunk 10
set.seed(123)
k <- 10
#Perform k-fold cross validation
folds <- createFolds(1:nrow(data_wide), k)
#Define function for performing gradient-free optimization
fn <- function(x){
ref <- x[1]
pros <- x[2]
fan <- x[3]
pred <- ref*data_wide$BRefPred + pros*data_wide$BBproPred + fan*data_wide$FanGraphPred
MSE(pred, data_wide$Truth)
}
#Initialize output matrix
MSE_val <- matrix(NA, 4, k)
coeffs <- matrix(NA, 3, k)
for(i in 1:k){
test_df <- data_wide[folds[[i]],]
train_df <- data_wide[-folds[[i]],]
m1 <- lm(Truth ~ BRefPred, data = train_df)
m2 <- lm(Truth ~ BBproPred, data = train_df)
m3 <- lm(Truth ~ FanGraphPred, data = train_df)
m4 <- optim(c(1, 1, 1), fn, method = c("Nelder-Mead"))
## test prediction on test dataset
pred1 <- predict(m1, newdata = test_df)
pred2 <- predict(m2, newdata = test_df)
pred3 <- predict(m3, newdata = test_df)
test_df_lm <- cbind(test_df,
BRef_lmpred = pred1,
BBpro_lmpred = pred2,
FanGraph_lmpred = pred3)
MSE_val[1, i] <- MSE(test_df_lm$Truth, test_df_lm$BRef_lmpred)
MSE_val[2, i] <- MSE(test_df_lm$Truth, test_df_lm$BBpro_lmpred)
MSE_val[3, i] <- MSE(test_df_lm$Truth, test_df_lm$FanGraph_lmpred)
MSE_val[4, i] <- m4$value
for(j in 1:3){
coeffs[j, i] <- m4$par[j]
}
}
rownames(MSE_val) <- c("Baseball Reference", "Baseball Prospectus", "Fangraph", "Combined Model")
apply(MSE_val, 1, mean)
# Chunk 11
#Obtain coefficients from combined model
final_coef <- apply(coeffs, 1, mean)
#Make predictions based on combined model
data_wide <- data_wide %>%
mutate(CombinedPred = final_coef[1]*data_wide$BRefPred + final_coef[2]*data_wide$BBproPred + final_coef[3]*data_wide$FanGraphPred )
data_wide %>% ggplot() +
geom_point(aes(x = Truth, y = FanGraphPred, color="Fan Graph"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BBproPred, color="Baseball Prospectus"), alpha = 0.5) +
geom_point(aes(x = Truth, y = BRefPred, color="Baseball Reference"), alpha = 0.5) +
geom_point(aes(x = Truth, y = CombinedPred, color = "Final Model"), alpha = 0.5) +
scale_fill_manual(values = c("Fan Graph" = rgb(1, 0, 0), "Baseball Prospectus" = rgb(0, 1, 0), "Baseball Reference"=rgb(0, 0, 1), "Final Model" = rgb(0, 0, 0))) +
geom_abline(slope = 1, intercept = 0) +
ggtitle("True v Predicted Wins") +
xlab("True Wins") +
ylab("Predicted Wins") +
xlim(40, 125) +
ylim(40, 125)
